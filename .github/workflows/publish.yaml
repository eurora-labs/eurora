name: 'Publish'

permissions:
    contents: read # Required for checkout
    actions: read # Required for downloading artifacts

on:
    schedule:
        # every day at 3am
        - cron: '0 3 * * *'
    workflow_run:
        workflows: ['Nightly build']
        types:
            - completed

    workflow_dispatch:
        inputs:
            channel:
                type: choice
                required: true
                description: channel
                default: nightly
                options:
                    - release
                    - nightly
            bump:
                type: choice
                required: true
                description: update type
                default: patch
                options:
                    - undefined
                    - patch
                    - minor
                    - major

jobs:
    build-sveltekit:
        runs-on: ubuntu-latest
        environment:
            name: eurora-main-app
        env:
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        steps:
            - name: Trigger Sentry Cron - In Progress
              if: ${{ github.event_name == 'schedule' }}
              shell: bash
              run: curl "${{ secrets.SENTRY_CRONS }}?status=in_progress"
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  persist-credentials: false
                  lfs: true
            - name: Consume input variables
              shell: bash
              if: ${{ !github.event.workflow_run }}
              env:
                  INPUT_CHANNEL: ${{ github.event.inputs.channel || 'nightly' }}
                  INPUT_BUMP: ${{ github.event.inputs.bump || 'patch' }}
              run: |
                  VITEMODE=nightly
                  if [[ "$INPUT_CHANNEL" == "release" ]]; then
                    VITEMODE=production
                  fi

                  {
                    echo "vitemode<<EOF"
                    echo "$VITEMODE"
                    echo "EOF"
                    echo "channel<<EOF"
                    echo "$INPUT_CHANNEL"
                    echo "EOF"
                    echo "bump<<EOF"
                    echo "$INPUT_BUMP"
                    echo "EOF"
                  } >> $GITHUB_ENV
            - name: Calculate next version
              shell: bash
              run: |
                  # Default to 0.1.0 if no version is found
                  CURRENT_VERSION="0.1.0"
                  if [ -f "apps/desktop/package.json" ]; then
                    CURRENT_VERSION=$(grep -o '"version": *"[^"]*"' apps/desktop/package.json | cut -d'"' -f4)
                  fi
                  NEXT_VERSION=$(./scripts/next.sh "${CURRENT_VERSION}" "${{ env.bump }}")
                  {
                    echo "version<<EOF"
                    echo "$NEXT_VERSION"
                    echo "EOF"
                  } >> $GITHUB_ENV
                  mkdir -p release && echo "$NEXT_VERSION" > release/version
            - name: Init Node Environment
              uses: ./.github/actions/init-env-node
            - name: Install Protoc
              uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Compile Protobuf
              run: pnpm proto:typescript
            - name: Build SvelteKit
              run: pnpm build:desktop -- --mode ${{ env.vitemode }}
              env:
                  SENTRY_RELEASE: ${{ env.version }}
            - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              name: Upload pnpm-store contents
              with:
                  name: pnpm-store
                  path: /home/runner/setup-pnpm/node_modules/.bin/store/v3
                  retention-days: 7
            - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              name: Upload SvelteKit build output
              with:
                  name: sveltekit-build
                  path: ./apps/desktop/build/
                  retention-days: 1
                  if-no-files-found: error

    build-tauri:
        needs: build-sveltekit
        env:
            CARGO_TERM_COLOR: always
        strategy:
            fail-fast: false
            matrix:
                # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-private-repositories
                platform:
                    # - macos-13 # [macOs, x64]
                    # - macos-latest # [macOs, ARM64]
                    - ubuntu-24.04 # [linux, x64]
                    - windows-latest # [windows, x64]

        runs-on: ${{ matrix.platform }}

        outputs:
            platform: ${{ matrix.platform }}
            channel: ${{ env.channel }}

        steps:
            # Because GitHub broke perl installations sometime in 2022 on Windows.
            - name: perl -V (before re-install)
              if: runner.os == 'Windows'
              run: which perl && perl -V
            - name: Setup perl
              if: runner.os == 'Windows'
              uses: shogo82148/actions-setup-perl@f9f0bf89e0d19ddbabb2f40d43db2e944bce7d2f # v1
              with:
                  perl-version: '5.38'
                  distribution: strawberry
            - name: Set git to use LF
              if: runner.os == 'Windows'
              run: |
                  git config --global core.autocrlf false
                  git config --global core.eol lf
            - name: perl -V
              if: runner.os == 'Windows'
              run: which perl && perl -V
            - name: Ensure we have a working Perl toolchain
              if: runner.os == 'Windows'
              run: cpanm ExtUtils::Manifest App::cpanminus Locale::Maketext::Simple
            - name: Set Perl environment variables
              if: runner.os == 'Windows'
              run: |
                  echo "PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
                  echo "OPENSSL_SRC_PERL=$((where.exe perl)[0])" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  persist-credentials: false
                  lfs: true

            - name: Init Node Environment
              uses: ./.github/actions/init-env-node

            - name: Consume input variables
              shell: bash
              if: ${{ !github.event.workflow_run }}
              env:
                  INPUT_CHANNEL: ${{ github.event.inputs.channel || 'nightly' }}
                  INPUT_BUMP: ${{ github.event.inputs.bump || 'patch' }}
              run: |
                  {
                    echo "channel<<EOF"
                    echo "$INPUT_CHANNEL"
                    echo "EOF"
                    echo "bump<<EOF"
                    echo "$INPUT_BUMP"
                    echo "EOF"
                  } >> $GITHUB_ENV

            - name: Calculate next version
              shell: bash
              run: |
                  # Default to 0.1.0 if no version is found
                  CURRENT_VERSION="0.1.0"
                  if [ -f "apps/desktop/package.json" ]; then
                    CURRENT_VERSION=$(grep -o '"version": *"[^"]*"' apps/desktop/package.json | cut -d'"' -f4)
                  fi
                  NEXT_VERSION=$(./scripts/next.sh "${CURRENT_VERSION}" "${{ env.bump }}")
                  {
                    echo "version<<EOF"
                    echo "$NEXT_VERSION"
                    echo "EOF"
                  } >> $GITHUB_ENV
                  mkdir -p release && echo "$NEXT_VERSION" > release/version

            #   - name: Import GPG key
            #     if: runner.os == 'Linux'
            #     uses: crazy-max/ghaction-import-gpg@v6
            #     with:
            #       gpg_private_key: ${{ secrets.APPIMAGE_PRIVATE_KEY }}
            #       passphrase: ${{ secrets.APPIMAGE_KEY_PASSPHRASE }}

            - name: Install linux dependencies
              shell: bash
              if: runner.os == 'Linux'
              run: |
                  sudo apt update;
                  sudo apt install -y \
                    build-essential \
                    curl \
                    wget \
                    file \
                    libssl-dev \
                    libgtk-3-dev \
                    libappindicator3-dev \
                    librsvg2-dev \
                    libwebkit2gtk-4.1-0 \
                    libwebkit2gtk-4.1-dev \
                    libgbm-dev \
                    libjavascriptcoregtk-4.1-0 \
                    libjavascriptcoregtk-4.1-dev \
                    gir1.2-javascriptcoregtk-4.1 \
                    gir1.2-webkit2-4.1 \
                    libpipewire-0.3-dev;

            - name: Install Protoc
              uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Compile Protobuf
              run: pnpm proto:typescript

            - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
              with:
                  name: sveltekit-build
                  path: ./apps/desktop/build/

            - name: Build binary
              shell: bash
              run: |
                  ./scripts/release.sh \
                    --channel                    "${{ env.channel }}" \
                    --dist                       "./release" \
                    --version                    "${{ env.version }}"
              env:
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
                  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_PROVIDER_SHORT_NAME }}
                  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
                  APPIMAGE_KEY_ID: ${{ secrets.APPIMAGE_KEY_ID }}
                  APPIMAGE_KEY_PASSPHRASE: ${{ secrets.APPIMAGE_KEY_PASSPHRASE }}
                  POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}

            - name: Upload Artifacts
              uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: '${{ env.channel }}-${{ matrix.platform }}-${{ github.run_number }}'
                  path: release/
                  if-no-files-found: error

    publish-tauri:
        needs: [build-tauri]
        runs-on: ubuntu-latest
        outputs:
            version: ${{ env.version }}
        strategy:
            fail-fast: false
            matrix:
                # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-private-repositories
                platform:
                    # - macos-13 # [macOs, x64]
                    # - macos-latest # [macOs, ARM64]
                    - ubuntu-24.04 # [linux, x64]
                    - windows-latest # [windows, x64]
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  persist-credentials: false
            - name: Download artifacts
              uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
              with:
                  name: '${{ needs.build-tauri.outputs.channel }}-${{ matrix.platform }}-${{ github.run_number }}'
                  path: release
            - name: Extract version
              shell: bash
              run: |
                  VERSION="$(cat release/version)"
                  {
                    echo "version<<EOF"
                    echo "$VERSION"
                    echo "EOF"
                  } >> $GITHUB_ENV
            - name: Prepare S3 payload
              shell: bash
              run: |
                  rm -rf release-s3
                  mkdir -p release-s3
                  rsync -avE --prune-empty-dirs --include-from='.github/workflows/publish.include.txt' --exclude='*' release/ release-s3/
                  bash scripts/normalize_spaces.sh ./release-s3
            - uses: shallwefootball/s3-upload-action@0d261a6f15b3b2e209dfebdecace4b100c04f95b # master
              name: Upload To S3
              id: S3
              with:
                  aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws_bucket: 'releases.eurora-labs.com'
                  source_dir: 'release-s3/'
                  destination_dir: 'releases/${{ needs.build-tauri.outputs.channel }}/${{ env.version }}-${{ github.run_number }}'

            # tell our server to update with the version number
        #   - name: Notify Eurora API of new release
        #     shell: bash
        #     if: secrets.BOT_AUTH_TOKEN != ''
        #     run: |
        #       curl 'https://app.eurora.com/api/releases' \
        #         --fail \
        #         --request POST \
        #         --header 'Content-Type: application/json' \
        #         --header 'X-Auth-Token: ${{ secrets.BOT_AUTH_TOKEN }}' \
        #         --data '{"channel":"${{ needs.build-tauri.outputs.channel }}","version":"${{ env.version }}-${{ github.run_number }}","sha":"${{ github.sha }}"}'

    create-git-tag:
        needs: [publish-tauri, build-tauri]
        runs-on: ubuntu-latest
        permissions:
            contents: write # Required for creating and pushing git tags
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  persist-credentials: true
            - name: Create git tag
              shell: bash
              env:
                  TAG_NAME: '${{ needs.build-tauri.outputs.channel }}/${{ needs.publish-tauri.outputs.version }}'
              run: |
                  function tag_exists() {
                    git tag --list | grep -q "^$1$"
                  }
                  function fetch_tag() {
                    git fetch origin "refs/tags/$1:refs/tags/$1"
                  }
                  function delete_tag() {
                    git push --delete origin "$1"
                  }
                  function create_tag() {
                    git tag --force "$1"
                    git push --tags
                  }

                  fetch_tag "$TAG_NAME" || true
                  if tag_exists "$TAG_NAME"; then
                    delete_tag "$TAG_NAME"
                  fi
                  create_tag "$TAG_NAME"
            - name: Trigger Sentry Cron - Complete
              if: ${{ github.event_name == 'schedule' }}
              shell: bash
              run: curl "${{ secrets.SENTRY_CRONS }}?status=ok"
