name: 'Test'
on:
    push:
        branches:
            - main
    pull_request:

env:
    RUST_BACKTRACE: full
    PUBLIC_STRIPE_KEY: ${{ secrets.PUBLIC_STRIPE_KEY }}

permissions:
    id-token: write
    contents: read
    packages: read

jobs:
    changes:
        runs-on: ubuntu-latest
        outputs:
            node: ${{ steps.filter.outputs.node }}
            rust: ${{ steps.filter.outputs.rust }}
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false

            - name: Init Node Environment
              uses: ./.github/actions/init-env-node

            - name: Install Protoc
              uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Compile Protobuf
              run: pnpm proto:typescript

            - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
              id: filter
              with:
                  filters: |
                      workflows: &workflows
                        - '.github/workflows/**'
                        - '.github/actions/**'
                      docs:
                        - '**/*.md'
                      node:
                        - *workflows
                        - 'apps/**'
                        - 'packages/**'
                        - 'package.json'
                        - 'pnpm-lock.yaml'
                      common-rust: &rust
                        - *workflows
                        - 'Cargo.lock'
                        - 'Cargo.toml'
                      rust: &any-rust
                        - *rust
                        - 'crates/**'

    prettier:
        needs: changes
        if: ${{ needs.changes.outputs.node == 'false' &&  needs.changes.outputs.docs == 'true'}}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - uses: ./.github/actions/init-env-node
            - run: pnpm prettier

    lint-node:
        needs: changes
        if: ${{ needs.changes.outputs.node == 'true' }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - uses: ./.github/actions/init-env-node
            - run: pnpm lint

    check-node:
        needs: changes
        if: ${{ needs.changes.outputs.node == 'true' }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - uses: ./.github/actions/init-env-node
            - name: Install Protoc
              uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
            - name: Compile Protobuf
              run: pnpm proto:typescript
            - run: pnpm check

    unittest-node:
        needs: changes
        if: ${{ needs.changes.outputs.node == 'true' }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - uses: ./.github/actions/init-env-node
            - name: Install Protoc
              uses: arduino/setup-protoc@c65c819552d16ad3c9b72d9dfd5ba5237b9c906b # v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
            - name: Compile Protobuf
              run: pnpm proto:typescript
            - run: pnpm test

    rust-lint:
        needs: changes
        if: ${{ needs.changes.outputs.rust == 'true' }}
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/eurora-labs/ci-base-image:latest
        env:
            CARGO_TERM_COLOR: always
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - run: cargo fmt --check --all
            - run: cargo check --workspace --all-targets

    rust-docs:
        needs: changes
        if: ${{ needs.changes.outputs.rust == 'true' }}
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/eurora-labs/ci-base-image:latest
        env:
            CARGO_TERM_COLOR: always
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            # TODO(qix-): we have to exclude the app here for now because for some
            # TODO(qix-): reason it doesn't build with the docs feature enabled.
            - run: cargo doc --no-deps --all-features --document-private-items -p eurora-desktop
              env:
                  RUSTDOCFLAGS: -Dwarnings

    rust-test:
        needs: changes
        if: ${{ needs.changes.outputs.rust == 'true' }}
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/eurora-labs/ci-base-image:latest
        env:
            CARGO_TERM_COLOR: always
        strategy:
            matrix:
                # Specifies which features should be applied when running the checks and tests
                # '' indicates no flags relating to features passed
                # [] indicates --no-default-features flag passed
                # '*' indicates --all-features passed
                # [entry1, entry2] indicates --features entry1 entry2
                features:
                    - ''
                    - '*'
                    - []
                    - [tokio]
                    - [devtools]
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - uses: ./.github/actions/check-crate
              with:
                  features: ${{ toJson(matrix.features) }}

    check-rust:
        if: always()
        needs:
            - changes
            - check-rust-windows
            - rust-test
            - rust-lint
        runs-on: ubuntu-latest
        env:
            CARGO_TERM_COLOR: always
        steps:
            - name: Decide whether the needed jobs succeeded or failed
              uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # release/v1
              with:
                  allowed-skips: ${{ toJSON(needs) }}
                  jobs: ${{ toJSON(needs) }}

    check-rust-windows:
        needs: changes
        runs-on: windows-latest
        if: ${{ needs.changes.outputs.rust == 'true' }}
        env:
            CARGO_TERM_COLOR: always
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false
            - name: Rust Cache
              uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
              with:
                  shared-key: windows-rust-testing
                  key: ${{ inputs.features }}
            - name: 'cargo check'
              run: cargo check --workspace --all-targets --features windows
