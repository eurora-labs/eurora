name: Deploy Monolith Backend

on:
    push:
        branches: ['main']
        paths:
            - 'crates/backend/eur-monolith/**'
            - 'crates/backend/eur-auth-service/**'
            - 'crates/backend/eur-ocr-service/**'
            - 'crates/backend/eur-remote-db/**'
            - 'crates/common/eur-auth/**'
            - 'proto/**'
            - '.github/workflows/deploy-monolith.yml'
    workflow_dispatch:

permissions:
    id-token: write
    contents: read
    packages: write

concurrency:
    group: 'monolith-deploy'
    cancel-in-progress: true

env:
    RUST_VERSION: nightly
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}/eur-monolith

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false

            - uses: dtolnay/rust-toolchain@5d458579430fc14a04a08a1e7d3694f545e91ce6 # stable
              with:
                  toolchain: nightly
                  components: rustfmt, clippy

            - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2
              with:
                  workspaces: 'crates/backend/eur-monolith'

            - name: Install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y protobuf-compiler libglib2.0-dev libgtk-3-dev \
                    libpango1.0-dev libatk1.0-dev libgdk-pixbuf-2.0-dev libcairo2-dev \
                    pkg-config libjavascriptcoregtk-4.1-dev libsoup-3.0-dev \
                    libwebkit2gtk-4.1-dev libpipewire-0.3-dev

            - run:
                  cargo fmt --all -- --check
                  # - name: Run clippy
                  # run: cargo clippy --all-targets --all-features -- -D warnings

                  # - name: Run tests
                  # run: cargo test --workspace

            - name: Build monolith
              run: cargo build --release --package eur-monolith

            - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
              with:
                  name: eur-monolith-binary
                  path: target/release/eur-monolith
                  retention-days: 7

    docker:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
              with:
                  persist-credentials: false

            - name: Download build artifact
              uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
              with:
                  name: eur-monolith-binary
                  path: ./target/release/

            - name: Make binary executable
              run: chmod +x ./target/release/eur-monolith

            - name: Create Dockerfile
              run: |
                  cat > Dockerfile << 'EOF'
                  FROM ubuntu:24.04
                  RUN apt-get update && apt-get install -y ca-certificates libssl3 && rm -rf /var/lib/apt/lists/*
                  RUN useradd -r -s /bin/false eurora
                  COPY target/release/eur-monolith /usr/local/bin/eur-monolith
                  RUN chown eurora:eurora /usr/local/bin/eur-monolith
                  USER eurora
                  EXPOSE 50051
                  ENV MONOLITH_ADDR=[::]:50051
                  HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 CMD timeout 3s bash -c "</dev/tcp/localhost/50051" || exit 1
                  CMD ["/usr/local/bin/eur-monolith"]
                  EOF

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

            - name: Log in to Container Registry
              uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=${{ github.sha }}
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image to GHCR
              uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
              with:
                  context: .
                  push: true
                  load: true
                  tags: |
                      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8 # v5
              with:
                  role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecr-full-access
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: ecr-login
              uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2
            - name: Tag and push image to ECR
              run: |
                  IMAGE_SHA=${{ github.sha }}
                  SRC_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_SHA
                  ECR_REPO=${{ secrets.ECR_REPOSITORY }}
                  docker tag $SRC_IMAGE $ECR_REPO:$IMAGE_SHA
                  docker tag $SRC_IMAGE $ECR_REPO:latest
                  docker push $ECR_REPO:$IMAGE_SHA
                  docker push $ECR_REPO:latest
